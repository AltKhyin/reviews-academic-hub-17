
{
  "content": "// ABOUTME: Represents a single cell in a 2D grid, capable of holding a block.\nimport React from 'react';\nimport { ReviewBlock } from '@/types/review';\nimport { GridPosition } from '@/types/grid';\nimport { BlockContentEditor, BlockContentEditorProps } from '../BlockContentEditor';\nimport { Button } from '@/components/ui/button';\nimport { Plus } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nexport interface Grid2DCellProps {\n  position: GridPosition;\n  block: ReviewBlock | null; \n  activeBlockId: string | null;\n  onActiveBlockChange: (blockId: string | null) => void;\n  onUpdateBlock: (blockId: string, updates: Partial<ReviewBlock>) => void;\n  onDeleteBlock: (blockId: string) => void;\n  onAddBlock: (position: GridPosition) => void; \n  gridId: string; \n  onDragOverCell?: (e: React.DragEvent, position: GridPosition) => void;\n  onDropInCell?: (e: React.DragEvent, position: GridPosition) => void;\n  isDragOver?: boolean; \n  readonly?: boolean;\n}\n\nexport const Grid2DCell: React.FC<Grid2DCellProps> = ({\n  position,\n  block,\n  activeBlockId,\n  onActiveBlockChange,\n  onUpdateBlock,\n  onDeleteBlock,\n  onAddBlock,\n  // gridId, // gridId is passed but BlockContentEditor doesn't directly use it\n  onDragOverCell,\n  onDropInCell,\n  isDragOver,\n  readonly,\n}) => {\n  const handleAddClick = () => {\n    onAddBlock(position);\n  };\n\n  const handleSelectBlock = () => {\n    if (block) {\n      onActiveBlockChange(block.id);\n    }\n  };\n  \n  const handleMovePlaceholder = () => console.log(\"Move within cell not implemented directly here\");\n\n  const blockContentEditorProps: BlockContentEditorProps = {\n    block: block as ReviewBlock, // Cast because it can be null\n    isActive: !!block && activeBlockId === block.id,\n    onSelect: handleSelectBlock,\n    onUpdate: onUpdateBlock,\n    onDelete: onDeleteBlock,\n    onMove: (id, dir) => console.log('Move from Grid2DCell BDE: ', id, dir), // Placeholder\n    onAddBlock: (type, pos) => console.log('Add from Grid2DCell BDE: ', type, pos), // Placeholder\n    readonly: readonly,\n  };\n\n  return (\n    <div\n      className={cn(\n        \"grid-2d-cell border-2 border-dashed rounded min-h-[100px] p-1 flex flex-col justify-center items-center transition-all duration-150\",\n        block ? \"border-gray-700 bg-gray-900/30\" : \"border-gray-800 hover:border-gray-700\",\n        activeBlockId && block && activeBlockId === block.id && \"ring-2 ring-blue-500 border-blue-500\",\n        isDragOver && \"bg-blue-900/30 border-blue-500\"\n      )}\n      style={{ borderColor: isDragOver ? '#3b82f6' : (block ? '#374151' : '#2b3245') }}\n      onDragOver={(e) => {\n        if (onDragOverCell) {\n            e.preventDefault(); \n            onDragOverCell(e, position);\n        }\n      }}\n      onDrop={(e) => {\n        if (onDropInCell) {\n            e.preventDefault();\n            onDropInCell(e, position);\n        }\n      }}\n      onClick={!block ? handleAddClick : undefined} \n    >\n      {block ? (\n        <BlockContentEditor {...blockContentEditorProps} />\n      ) : (\n        !readonly && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleAddClick}\n            className=\"text-gray-400 hover:text-gray-300 hover:bg-gray-800\"\n          >\n            <Plus className=\"w-4 h-4 mr-1\" />\n            Bloco\n          </Button>\n        )\n      )}\n    </div>\n  );\n};\n"
}
