
{
  "content": "// ABOUTME: Enhanced 2D grid row component with string ID support and proper event handling\n// Manages individual rows within 2D grid layouts\n\nimport React, { useCallback } from 'react';\nimport { GridRow, GridPosition, GridCell as GridCellType } from '@/types/grid';\nimport { ReviewBlock } from '@/types/review';\nimport { Grid2DCell, Grid2DCellProps } from './Grid2DCell'; \nimport { Button } from '@/components/ui/button';\nimport { Plus, Minus } from 'lucide-react';\n// cn utility is not used in the provided snippet, remove if not needed elsewhere in full file\n// import { cn } from '@/lib/utils'; \n\n// DragState is not used directly here, might be part of a broader context not shown\n/*\ninterface DragState {\n  draggedBlockId: string | null;\n  dragOverRowId: string | null;\n  dragOverPosition: number | null;\n  isDragging: boolean;\n  draggedFromRowId: string | null;\n  dropTargetType: 'grid' | 'single' | 'merge' | null;\n}\n*/\n\ninterface Grid2DRowProps {\n  row: GridRow;\n  rowIndex: number;\n  gridId: string;\n  columns: number; // This prop might be redundant if row.cells determines columns\n  activeBlockId: string | null;\n  onActiveBlockChange: (blockId: string | null) => void;\n  onUpdateBlock: (blockId: string, updates: Partial<ReviewBlock>) => void;\n  onDeleteBlock: (blockId: string) => void;\n  // onAddBlock changed: Grid2DRow now receives a function that already knows gridId\n  onAddBlockToCell: (position: GridPosition) => void; \n  onAddRowAbove: (gridId: string, rowIndex: number) => void;\n  onAddRowBelow: (gridId: string, rowIndex: number) => void;\n  onRemoveRow: (gridId: string, rowIndex: number) => void;\n  canRemoveRow: boolean;\n  onCellDragOver?: (e: React.DragEvent, position: GridPosition) => void;\n  onCellDrop?: (e: React.DragEvent, position: GridPosition) => void;\n  dragOverCellPosition?: GridPosition | null; \n  readonly?: boolean;\n}\n\nexport const Grid2DRow: React.FC<Grid2DRowProps> = ({\n  row,\n  rowIndex,\n  gridId,\n  activeBlockId,\n  onActiveBlockChange,\n  onUpdateBlock,\n  onDeleteBlock,\n  onAddBlockToCell, // Use the renamed prop\n  onAddRowAbove,\n  onAddRowBelow,\n  onRemoveRow,\n  canRemoveRow,\n  onCellDragOver,\n  onCellDrop,\n  dragOverCellPosition,\n  readonly,\n}) => {\n  // handleAddBlockInSpecificCell is now directly onAddBlockToCell from props\n  // const handleAddBlockInSpecificCell = useCallback((cellPosition: GridPosition) => {\n  //   onAddBlock(gridId, cellPosition);\n  // }, [onAddBlock, gridId]);\n\n  return (\n    <>\n      {!readonly && (\n        <div className=\"grid-2d-row-controls col-span-full flex items-center justify-between py-1 mb-2\">\n          <span className=\"text-xs text-gray-500 font-mono\">\n            Linha {rowIndex + 1} (ID: {row.id.substring(0,8)})\n          </span>\n\n          <div className=\"flex items-center gap-1\">\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => onAddRowAbove(gridId, rowIndex)}\n              className=\"w-6 h-6 p-0 text-blue-400 hover:text-blue-300 hover:bg-blue-900/20\"\n              title=\"Adicionar linha acima\"\n            >\n              <Plus className=\"w-3 h-3\" />\n            </Button>\n\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => onAddRowBelow(gridId, rowIndex)}\n              className=\"w-6 h-6 p-0 text-green-400 hover:text-green-300 hover:bg-green-900/20\"\n              title=\"Adicionar linha abaixo\"\n            >\n              <Plus className=\"w-3 h-3\" />\n            </Button>\n\n            {canRemoveRow && (\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => onRemoveRow(gridId, rowIndex)}\n                className=\"w-6 h-6 p-0 text-red-400 hover:text-red-300 hover:bg-red-900/20\"\n                title=\"Remover linha\"\n              >\n                <Minus className=\"w-3 h-3\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      )}\n\n      {row.cells.map((cell: GridCellType) => {\n        const cellPosition: GridPosition = { row: cell.row, column: cell.column };\n        const isDragOver = dragOverCellPosition?.row === cell.row && dragOverCellPosition?.column === cell.column;\n        \n        // key is applied on the component instance, not passed in cellProps\n        const cellProps: Omit<Grid2DCellProps, 'key'> = {\n            position: cellPosition,\n            block: cell.block,\n            activeBlockId: activeBlockId,\n            onActiveBlockChange: onActiveBlockChange,\n            onUpdateBlock: onUpdateBlock,\n            onDeleteBlock: onDeleteBlock,\n            onAddBlock: onAddBlockToCell, // Pass the correctly scoped onAddBlockToCell\n            gridId: gridId,\n            onDragOverCell: onCellDragOver, \n            onDropInCell: onCellDrop,\n            isDragOver: isDragOver,\n            readonly: readonly,\n        };\n        return <Grid2DCell key={cell.id} {...cellProps} />;\n      })}\n    </>\n  );\n};\n"
}
