
{
  "content": "// ABOUTME: Enhanced native editor with fullscreen capability, improved UX, and string ID support\n// Main editor container with fullscreen mode support\n\nimport React, { useState, useEffect, useCallback, Dispatch, SetStateAction } from 'react';\nimport { ReviewBlock, BlockType } from '@/types/review';\nimport { BlockEditor } from './BlockEditor';\nimport { BlockPalette } from './BlockPalette';\nimport { ReviewPreview } from './ReviewPreview';\nimport { EditorToolbar, EditorToolbarProps } from './EditorToolbar'; \nimport { EditorStatusBar, EditorStatusBarProps } from './EditorStatusBar'; \nimport { NativeEditorFullscreen } from './NativeEditorFullscreen';\nimport { useEditorAutoSave } from '@/hooks/useEditorAutoSave';\nimport { useBlockManagement } from '@/hooks/useBlockManagement';\nimport { useEditorKeyboardShortcuts } from './hooks/useEditorKeyboardShortcuts';\nimport { Button } from '@/components/ui/button';\nimport { Maximize2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { GridPosition } from '@/types/grid';\n\ninterface NativeEditorProps {\n  issueId?: string;\n  initialBlocks?: ReviewBlock[];\n  onSave?: (blocks: ReviewBlock[]) => void;\n  onCancel?: () => void;\n  mode?: 'edit' | 'preview' | 'split';\n  className?: string;\n}\n\nexport const NativeEditor: React.FC<NativeEditorProps> = ({\n  issueId,\n  initialBlocks = [],\n  onSave,\n  mode: initialMode = 'split',\n  className\n}) => {\n  const [editorMode, setEditorMode] = useState<'edit' | 'preview' | 'split'>(initialMode);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  const {\n    blocks,\n    activeBlockId,\n    setActiveBlockId,\n    addBlock,\n    updateBlock,\n    deleteBlock,\n    moveBlock,\n    duplicateBlock,\n    convertToGrid,\n    convertTo2DGrid,\n    mergeBlockIntoGrid,\n    placeBlockIn2DGrid,\n    undo,\n    redo,\n    canUndo,\n    canRedo\n  } = useBlockManagement({ initialBlocks, issueId });\n\n  const { handleSave: triggerAutoSave, isSaving, lastSaved } = useEditorAutoSave({\n    data: blocks,\n    onSave: onSave ? async (dataToSave) => { onSave(dataToSave); } : undefined,\n    interval: 30000,\n    enabled: !!issueId && !!onSave\n  });\n\n  const handleManualSave = useCallback(() => {\n    if (onSave) {\n      onSave(blocks);\n      setHasUnsavedChanges(false);\n    }\n    triggerAutoSave();\n  }, [blocks, onSave, triggerAutoSave]);\n\n  useEditorKeyboardShortcuts({\n    onSave: handleManualSave,\n    onUndo: undo,\n    onRedo: redo\n  });\n\n  useEffect(() => {\n    const changed = JSON.stringify(blocks) !== JSON.stringify(initialBlocks);\n    setHasUnsavedChanges(changed);\n  }, [blocks, initialBlocks]);\n\n  const handleAddBlock = useCallback((type: BlockType, position?: number): string => {\n    const newBlockId = addBlock(type, position);\n    return newBlockId;\n  }, [addBlock]);\n\n  const handleBlockUpdate = useCallback((blockId: string, updates: Partial<ReviewBlock>) => {\n    updateBlock(blockId, updates);\n  }, [updateBlock]);\n\n  const handleBlockDelete = useCallback((blockId: string) => {\n    deleteBlock(blockId);\n  }, [deleteBlock]);\n\n  // Ensure this matches useBlockManagement's moveBlock signature\n  const handleBlockMove = useCallback((blockId: string, directionOrIndex: 'up' | 'down' | number) => {\n    moveBlock(blockId, directionOrIndex); // This was the source of the error, it now correctly matches useBlockManagement\n  }, [moveBlock]);\n\n  const handleDuplicateBlock = useCallback((blockId: string) => {\n    duplicateBlock(blockId);\n  }, [duplicateBlock]);\n\n  const handleConvertToGrid = useCallback((blockId: string, columns: number) => {\n    convertToGrid(blockId, columns);\n  }, [convertToGrid]);\n\n  const handleConvertTo2DGrid = useCallback((blockId: string, columns: number, rows: number) => {\n    convertTo2DGrid(blockId, columns, rows);\n  }, [convertTo2DGrid]);\n\n  const handleMergeBlockIntoGrid = useCallback((draggedBlockId: string, targetRowId: string, targetPosition?: number) => {\n    mergeBlockIntoGrid(draggedBlockId, targetRowId, targetPosition);\n  }, [mergeBlockIntoGrid]);\n\n  const handlePlaceBlockIn2DGrid = useCallback((blockId: string, gridId: string, position: GridPosition) => {\n    placeBlockIn2DGrid(blockId, gridId, position);\n  }, [placeBlockIn2DGrid]);\n\n  const handleImport = useCallback((importedBlocks: ReviewBlock[]) => {\n    let currentPos = blocks.length;\n    importedBlocks.forEach((block) => {\n      const newId = addBlock(block.type, currentPos++);\n      updateBlock(newId, { ...block, id: newId });\n    });\n  }, [addBlock, updateBlock, blocks.length]);\n\n  useEffect(() => {\n    const handleViewModeChange = (event: CustomEvent) => {\n      const { mode: newMode } = event.detail;\n      if (['edit', 'preview', 'split'].includes(newMode)) {\n        setEditorMode(newMode as 'edit' | 'preview' | 'split');\n      }\n    };\n    window.addEventListener('viewModeChange', handleViewModeChange as EventListener);\n    return () => window.removeEventListener('viewModeChange', handleViewModeChange as EventListener);\n  }, []);\n\n  if (isFullscreen) {\n    return (\n      <NativeEditorFullscreen\n        issueId={issueId}\n        initialBlocks={blocks} // Pass current blocks\n        onSave={handleManualSave} // Pass manual save which includes auto-save trigger\n        onClose={() => setIsFullscreen(false)}\n        mode={editorMode}\n      />\n    );\n  }\n  \n  const editorToolbarProps: EditorToolbarProps = {\n    editorMode,\n    onModeChange: setEditorMode as Dispatch<SetStateAction<\"edit\" | \"preview\" | \"split\">>, // Cast for safety\n    hasUnsavedChanges,\n    isSaving,\n    lastSaved,\n    canUndo,\n    canRedo,\n    onUndo: undo,\n    onRedo: redo,\n    onSave: handleManualSave,\n    blocks,\n    onImport: handleImport,\n  };\n\n  const editorStatusBarProps: EditorStatusBarProps = {\n      blockCount: blocks.length,\n      activeBlockId: activeBlockId,\n  };\n\n\n  return (\n    <div\n      className={cn(\"native-editor h-full flex flex-col overflow-hidden\", className)}\n      style={{ backgroundColor: '#121212' }}\n    >\n      <div className=\"flex items-center justify-between p-1 border-b\" style={{ borderColor: '#2a2a2a', backgroundColor: '#161616' }}>\n        <EditorToolbar {...editorToolbarProps} />\n        <Button\n          onClick={() => setIsFullscreen(true)}\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"flex items-center gap-2 text-gray-300 hover:text-white ml-auto px-2\"\n          title=\"Editor Fullscreen\"\n        >\n          <Maximize2 className=\"w-4 h-4\" />\n          <span className=\"hidden sm:inline\">Fullscreen</span>\n        </Button>\n      </div>\n\n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"h-full flex\">\n          {(editorMode === 'edit' || editorMode === 'split') && (\n            <div\n              className=\"w-64 border-r overflow-y-auto flex-shrink-0\"\n              style={{ backgroundColor: '#1a1a1a', borderColor: '#2a2a2a' }}\n            >\n              <BlockPalette onBlockAdd={handleAddBlock} />\n            </div>\n          )}\n\n          {(editorMode === 'edit' || editorMode === 'split') && (\n            <div\n              className={cn(\n                \"flex-1 px-2 overflow-y-auto\", \n                editorMode === 'split' && \"border-r\"\n              )}\n              style={{ borderColor: '#2a2a2a', backgroundColor: '#121212' }}\n            >\n              <BlockEditor\n                blocks={blocks}\n                activeBlockId={activeBlockId}\n                onActiveBlockChange={setActiveBlockId}\n                onUpdateBlock={handleBlockUpdate}\n                onDeleteBlock={handleBlockDelete}\n                onMoveBlock={handleBlockMove} \n                onAddBlock={handleAddBlock}\n                onDuplicateBlock={handleDuplicateBlock}\n                onConvertToGrid={handleConvertToGrid}\n                onConvertTo2DGrid={handleConvertTo2DGrid}\n                onMergeBlockIntoGrid={handleMergeBlockIntoGrid}\n                onPlaceBlockIn2DGrid={handlePlaceBlockIn2DGrid}\n              />\n            </div>\n          )}\n\n          {(editorMode === 'preview' || editorMode === 'split') && (\n            <div className=\"flex-1 px-2 overflow-y-auto\" style={{ backgroundColor: '#121212' }}>\n              <ReviewPreview\n                blocks={blocks}\n                className=\"h-full\"\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      <EditorStatusBar {...editorStatusBarProps} />\n    </div>\n  );\n};\n"
}
