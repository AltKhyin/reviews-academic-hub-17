
{
  "content": "// ABOUTME: A simple content editable component for React.\nimport React, { useRef, useEffect } from 'react';\n\ninterface ContentEditableProps extends React.HTMLAttributes<HTMLDivElement> {\n  html: string;\n  onChange: (event: React.ChangeEvent<HTMLDivElement & { target: { value: string } }>) => void;\n  tagName?: keyof JSX.IntrinsicElements;\n  placeholder?: string;\n}\n\nexport const ContentEditable: React.FC<ContentEditableProps> = ({\n  html,\n  onChange,\n  tagName = 'div',\n  placeholder,\n  className,\n  ...props\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const placeholderRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    if (ref.current && ref.current.innerHTML !== html) {\n      ref.current.innerHTML = html;\n    }\n  }, [html]);\n\n  useEffect(() => {\n    if (placeholderRef.current) {\n        placeholderRef.current.style.display = html ? 'none' : 'inline-block';\n    }\n  }, [html]);\n\n  const emitChange = () => {\n    if (ref.current) {\n      const newHtml = ref.current.innerHTML;\n      if (onChange && newHtml !== html) {\n        // Simulate a change event with a value property\n        const event = {\n          target: { value: newHtml }\n        } as React.ChangeEvent<HTMLDivElement & { target: { value: string } }>;\n        onChange(event);\n      }\n      if (placeholderRef.current) {\n        placeholderRef.current.style.display = newHtml ? 'none' : 'inline-block';\n      }\n    }\n  };\n\n  const Tag = tagName as React.ElementType; // Cast to allow dynamic tag\n\n  return (\n    <div style={{ position: 'relative' }} className={className}>\n        {placeholder && (\n            <span\n            ref={placeholderRef}\n            style={{\n                position: 'absolute',\n                top: '50%',\n                left: '0.25rem', // Corresponds to p-1 for text input\n                transform: 'translateY(-50%)',\n                color: '#6b7280', // gray-500\n                pointerEvents: 'none',\n                display: html ? 'none' : 'inline-block',\n                fontSize: 'inherit',\n            }}\n            >\n            {placeholder}\n            </span>\n        )}\n        <Tag\n            {...props}\n            ref={ref}\n            onInput={emitChange}\n            onBlur={emitChange} // Also emit on blur to catch final changes\n            contentEditable={!props.contentEditable === false} // Allow disabling contentEditable via props\n            dangerouslySetInnerHTML={{ __html: html }} // Initial content\n            // className merged from props\n        />\n    </div>\n  );\n};\n"
}
