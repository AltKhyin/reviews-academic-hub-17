
{
  "content": "// ABOUTME: Editor component for poll blocks.\nimport React from 'react';\nimport { ReviewBlock } from '@/types/review';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { PlusCircle, Trash2 } from 'lucide-react';\n\nexport interface PollOption {\n  id: string;\n  text: string;\n  votes?: number; // Optional, for displaying results if needed\n}\n\nexport interface PollBlockProps {\n  block: ReviewBlock;\n  onUpdate: (blockId: string, updates: Partial<ReviewBlock>) => void;\n  readonly?: boolean;\n  content: { question?: string; options?: PollOption[] };\n  onUpdateContent: (newContent: { question?: string; options?: PollOption[] }) => void;\n}\n\nexport const PollBlock: React.FC<PollBlockProps> = ({ block, content, onUpdateContent, readonly }) => {\n  const { question = '', options = [] } = content || {};\n\n  const handleQuestionChange = (newQuestion: string) => {\n    onUpdateContent({ ...content, question: newQuestion });\n  };\n\n  const handleOptionChange = (index: number, newText: string) => {\n    const newOptions = [...options];\n    newOptions[index] = { ...newOptions[index], text: newText };\n    onUpdateContent({ ...content, options: newOptions });\n  };\n\n  const addOption = () => {\n    const newOption: PollOption = { id: `opt-${Date.now()}-${Math.random().toString(36).substr(2,5)}`, text: '' };\n    onUpdateContent({ ...content, options: [...options, newOption] });\n  };\n\n  const removeOption = (index: number) => {\n    const newOptions = options.filter((_, i) => i !== index);\n    onUpdateContent({ ...content, options: newOptions });\n  };\n\n  if (readonly) {\n    return (\n      <div className=\"my-2 p-3 border border-cyan-700 rounded-md bg-cyan-900/20 text-cyan-300\">\n        <p className=\"font-semibold mb-2 text-cyan-200\">{question || 'Enquete sem pergunta'}</p>\n        <ul className=\"space-y-1.5\">\n          {options.map((option) => (\n            <li key={option.id} className=\"p-2 border border-cyan-600 rounded bg-cyan-800/30 text-sm\">\n              {option.text || 'Opção vazia'}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-3 space-y-3 border border-gray-700 rounded bg-gray-850\">\n      <div>\n        <Label htmlFor={`poll-question-${block.id}`} className=\"text-xs text-gray-400\">Pergunta da Enquete</Label>\n        <Input \n          id={`poll-question-${block.id}`} \n          value={question} \n          onChange={(e) => handleQuestionChange(e.target.value)} \n          placeholder=\"Qual sua opção favorita?\"\n          className=\"bg-gray-800 border-gray-600 text-white text-sm\"\n        />\n      </div>\n      <div>\n        <Label className=\"text-xs text-gray-400\">Opções</Label>\n        {options.map((option, index) => (\n          <div key={option.id} className=\"flex items-center gap-1.5 mt-1\">\n            <Input \n              value={option.text} \n              onChange={(e) => handleOptionChange(index, e.target.value)} \n              placeholder={`Opção ${index + 1}`}\n              className=\"flex-grow bg-gray-800 border-gray-600 text-white text-xs h-8\"\n            />\n            {options.length > 1 && (\n              <Button variant=\"ghost\" size=\"icon_xs\" onClick={() => removeOption(index)} className=\"text-red-500 hover:text-red-400 hover:bg-red-900/30 w-7 h-7 p-1\">\n                <Trash2 className=\"w-3.5 h-3.5\" />\n              </Button>\n            )}\n          </div>\n        ))}\n        <Button variant=\"outline\" size=\"sm\" onClick={addOption} className=\"mt-2 text-xs h-8 border-green-500 text-green-500 hover:bg-green-500/10 hover:text-green-400\">\n          <PlusCircle className=\"w-3.5 h-3.5 mr-1.5\" /> Adicionar Opção\n        </Button>\n      </div>\n    </div>\n  );\n};\n"
}
