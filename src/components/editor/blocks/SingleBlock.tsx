
{
  "content": "// ABOUTME: Wrapper for individual blocks providing common controls and context.\n// Handles actions like move, delete, duplicate for a single block.\n\nimport React from 'react';\nimport { ReviewBlock, BlockType } from '@/types/review';\nimport { BlockContentEditor, BlockContentEditorProps } from '../BlockContentEditor';\nimport { Button } from '@/components/ui/button';\nimport { GripVertical, ArrowUp, ArrowDown, Copy, Trash2, Grid, Columns } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nexport interface SingleBlockProps {\n  block: ReviewBlock;\n  // isActive: boolean; // This was causing an error, BlockContentEditor handles its own active state styling\n  onSelect: () => void;\n  onUpdateBlock: (blockId: string, updates: Partial<ReviewBlock>) => void;\n  onDeleteBlock: (blockId: string) => void;\n  onMoveBlock: (blockId: string, directionOrIndex: 'up' | 'down' | number) => void; // Matched to BlockEditor\n  onDuplicateBlock: (blockId: string) => void;\n  onConvertToGrid: (blockId: string, columns: number) => void;\n  onConvertTo2DGrid: (blockId: string, columns: number, rows: number) => void;\n  isFirst: boolean;\n  isLast: boolean;\n  readonly?: boolean;\n  className?: string;\n  activeBlockId?: string | null; // Added to determine if this block is active for outline\n}\n\nexport const SingleBlock: React.FC<SingleBlockProps> = ({\n  block,\n  onSelect,\n  onUpdateBlock,\n  onDeleteBlock,\n  onMoveBlock,\n  onDuplicateBlock,\n  onConvertToGrid,\n  onConvertTo2DGrid,\n  isFirst,\n  isLast,\n  readonly = false,\n  className,\n  activeBlockId,\n}) => {\n  const isActive = activeBlockId === block.id;\n\n  const handleContentUpdate = (contentUpdates: any) => {\n    onUpdateBlock(block.id, { content: { ...block.content, ...contentUpdates } });\n  };\n\n  // Props for BlockContentEditor\n  const blockContentEditorProps: BlockContentEditorProps = {\n    block,\n    isActive: isActive, // Pass active state to BlockContentEditor\n    onSelect: onSelect,\n    onUpdate: onUpdateBlock, // Pass directly\n    onDelete: onDeleteBlock,  // Pass directly\n    onMove: (id, dir) => onMoveBlock(id, dir), // Pass directly, ensuring dir type matches\n    onAddBlock: () => console.warn('onAddBlock from SingleBlock context not implemented'), // Placeholder\n    readonly: readonly,\n    isFirst: isFirst,\n    isLast: isLast,\n  };\n\n  return (\n    <div \n      className={cn(\n        \"single-block group relative p-1.5 rounded-md transition-shadow duration-200\",\n        isActive && \"ring-2 ring-offset-1 ring-offset-background ring-blue-600 shadow-lg\",\n        !readonly && \"hover:shadow-md\",\n        className\n      )}\n      style={{ backgroundColor: isActive ? 'rgba(37, 99, 235, 0.1)' : 'transparent' }}\n      onClick={onSelect} // Select block on click of the wrapper too, if not on an interactive element\n    >\n      {!readonly && (\n        <div className=\"absolute top-1 right-1 z-10 flex items-center gap-0.5 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity duration-150\">\n          <Button variant=\"ghost\" size=\"icon_xs\" onClick={(e) => { e.stopPropagation(); onMoveBlock(block.id, 'up'); }} disabled={isFirst} title=\"Mover para Cima\">\n            <ArrowUp className=\"w-3.5 h-3.5\" />\n          </Button>\n          <Button variant=\"ghost\" size=\"icon_xs\" onClick={(e) => { e.stopPropagation(); onMoveBlock(block.id, 'down'); }} disabled={isLast} title=\"Mover para Baixo\">\n            <ArrowDown className=\"w-3.5 h-3.5\" />\n          </Button>\n          <Button variant=\"ghost\" size=\"icon_xs\" onClick={(e) => { e.stopPropagation(); onDuplicateBlock(block.id); }} title=\"Duplicar Bloco\">\n            <Copy className=\"w-3.5 h-3.5\" />\n          </Button>\n          <Button variant=\"ghost\" size=\"icon_xs\" onClick={(e) => { e.stopPropagation(); onConvertToGrid(block.id, 2); }} title=\"Converter para Grid Layout (1D)\">\n            <Grid className=\"w-3.5 h-3.5\" />\n          </Button>\n           <Button variant=\"ghost\" size=\"icon_xs\" onClick={(e) => { e.stopPropagation(); onConvertTo2DGrid(block.id, 2, 2); }} title=\"Converter para Grid 2D\">\n            <Columns className=\"w-3.5 h-3.5\" />\n          </Button>\n          <Button variant=\"ghost\" size=\"icon_xs\" onClick={(e) => { e.stopPropagation(); onDeleteBlock(block.id); }} className=\"text-red-500 hover:text-red-400\" title=\"Deletar Bloco\">\n            <Trash2 className=\"w-3.5 h-3.5\" />\n          </Button>\n          <div className=\"drag-handle cursor-grab p-1\" title=\"Arrastar para Mover\">\n            <GripVertical className=\"w-3.5 h-3.5 text-gray-500\" />\n          </div>\n        </div>\n      )}\n\n      <BlockContentEditor {...blockContentEditorProps} />\n    </div>\n  );\n};\n"
}
