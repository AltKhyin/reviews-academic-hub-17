
{
  "content": "// ABOUTME: Enhanced diagram block with react-flow, theming, and improved UX\n// Provides interactive diagramming capabilities with persistence\n\nimport React, { useState, useCallback, useEffect, useMemo } from 'react';\nimport {\n  ReactFlow,\n  Controls,\n  Background,\n  addEdge,\n  applyNodeChanges,\n  applyEdgeChanges,\n  Node,\n  Edge,\n  Connection,\n  NodeTypes,\n  EdgeTypes,\n  MiniMap,\n  useReactFlow,\n  Panel,\n  BackgroundVariant,\n  NodeChange,\n  EdgeChange,\n  XYPosition, // Import XYPosition for explicit position type\n} from '@xyflow/react'; // Corrected import source\nimport '@xyflow/react/dist/style.css';\n\nimport { ReviewBlock, DiagramContent, DiagramNode as DiagramNodeType, DiagramEdge as DiagramEdgeType, DiagramNodeData, DiagramEdgeData } from '@/types/review';\nimport CustomNode from './diagram/CustomNode';\nimport FloatingEdge from './diagram/FloatingEdge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Eraser, Download, Palette } from 'lucide-react';\n\nconst getDefaultDiagramContent = (): DiagramContent => ({\n  nodes: [],\n  edges: [],\n  title: 'Novo Diagrama',\n  description: '',\n  canvas: { backgroundColor: '#1a1b26', gridSize: 20, zoom: 1, offsetX: 0, offsetY: 0 },\n});\n\ninterface DiagramBlockProps {\n  block: ReviewBlock;\n  onUpdate?: (updates: Partial<ReviewBlock>) => void;\n  readonly?: boolean;\n}\n\nexport const DiagramBlock: React.FC<DiagramBlockProps> = ({ \n  block,\n  onUpdate,\n  readonly = false,\n}) => {\n  const diagramContent = useMemo((): DiagramContent => {\n    const rawContent = block.content || {};\n    const defaultCanvas = getDefaultDiagramContent().canvas;\n    return {\n      ...getDefaultDiagramContent(),\n      ...rawContent,\n      canvas: {\n        ...defaultCanvas,\n        ...(rawContent.canvas || {}),\n      },\n      nodes: Array.isArray(rawContent.nodes) ? rawContent.nodes : [],\n      edges: Array.isArray(rawContent.edges) ? rawContent.edges : [],\n    };\n  }, [block.content]);\n\n  const [rfNodes, setRfNodes] = useState<Node<DiagramNodeData>[]>([]);\n  const [rfEdges, setRfEdges] = useState<Edge<DiagramEdgeData>[]>([]); // Specify EdgeData generic\n\n  const [title, setTitle] = useState(diagramContent.title || '');\n  const [description, setDescription] = useState(diagramContent.description || '');\n  const [canvasSettings, setCanvasSettings] = useState(diagramContent.canvas || getDefaultDiagramContent().canvas);\n  \n  // useReactFlow generic arguments are NodeData and EdgeData\n  const reactFlowInstance = useReactFlow<DiagramNodeData, DiagramEdgeData>();\n\n  useEffect(() => {\n    setRfNodes(diagramContent.nodes.map((n: DiagramNodeType): Node<DiagramNodeData> => ({\n      id: n.id,\n      position: { x: n.x, y: n.y },\n      type: 'custom',\n      data: n.data,\n      width: n.width,\n      height: n.height,\n    })));\n    setRfEdges(diagramContent.edges.map((e: DiagramEdgeType): Edge<DiagramEdgeData> => ({\n      id: e.id,\n      source: e.source,\n      target: e.target,\n      label: e.label,\n      type: e.type || 'floating',\n      data: e.data, \n      style: e.style,\n    })));\n    setTitle(diagramContent.title || '');\n    setDescription(diagramContent.description || '');\n    setCanvasSettings(diagramContent.canvas || getDefaultDiagramContent().canvas);\n  }, [diagramContent]);\n\n  const nodeTypes: NodeTypes = useMemo(() => ({ custom: CustomNode as React.ComponentType<NodeProps<any>> }), []); // Cast for compatibility\n  const edgeTypes: EdgeTypes = useMemo(() => ({ floating: FloatingEdge as React.ComponentType<EdgeProps<any>> }), []); // Cast for compatibility\n\n  const handleUpdateContent = useCallback(() => {\n    if (onUpdate) {\n      const updatedDiagramNodes: DiagramNodeType[] = rfNodes.map((n: Node<DiagramNodeData>): DiagramNodeType => ({\n        id: n.id,\n        x: n.position.x,\n        y: n.position.y,\n        width: n.width || n.data?.width || 150, \n        height: n.height || n.data?.height || 50,\n        data: n.data,\n      }));\n      const updatedDiagramEdges: DiagramEdgeType[] = rfEdges.map((e: Edge<DiagramEdgeData>): DiagramEdgeType => ({\n          id: e.id,\n          source: e.source,\n          target: e.target,\n          label: typeof e.label === 'string' ? e.label : e.data?.label,\n          type: (e.type as DiagramEdgeType['type']) || 'floating',\n          data: e.data,\n          style: e.style,\n      }));\n      \n      const updatedContent: DiagramContent = {\n        nodes: updatedDiagramNodes,\n        edges: updatedDiagramEdges,\n        title,\n        description,\n        canvas: canvasSettings,\n      };\n      onUpdate({ content: updatedContent });\n    }\n  }, [rfNodes, rfEdges, title, description, canvasSettings, onUpdate]);\n\n  useEffect(() => {\n    if (readonly) return;\n    const timer = setTimeout(() => {\n      handleUpdateContent();\n    }, 500);\n    return () => clearTimeout(timer);\n  }, [rfNodes, rfEdges, title, description, canvasSettings, readonly, handleUpdateContent]);\n\n  const onNodesChange = useCallback(\n    (changes: NodeChange[]) => setRfNodes((nds) => applyNodeChanges<DiagramNodeData>(changes, nds)),\n    [setRfNodes]\n  );\n  const onEdgesChange = useCallback(\n    (changes: EdgeChange[]) => setRfEdges((eds) => applyEdgeChanges<DiagramEdgeData>(changes, eds)),\n    [setRfEdges]\n  );\n  const onConnect = useCallback(\n    (connection: Connection | Edge) => {\n      const newEdge: Edge<DiagramEdgeData> = {\n        ...connection,\n        type: 'floating',\n        animated: true,\n        data: { label: '' }, // Provide initial data for the edge\n      };\n      setRfEdges((eds) => addEdge(newEdge, eds));\n    },\n    [setRfEdges]\n  );\n\n  const addNode = useCallback(() => {\n    const newNodeId = `node_${rfNodes.length + 1}_${Date.now()}`;\n    \n    // Ensure reactFlowInstance.project is available and types are correct\n    let position: XYPosition = { x: Math.random() * 400 + 50, y: Math.random() * 200 + 50 }; \n    if (reactFlowInstance && reactFlowInstance.project) {\n        position = reactFlowInstance.project({ x: position.x, y: position.y });\n    }\n\n    const newNodeData: DiagramNodeData = {\n        label: `Novo Nó ${rfNodes.length + 1}`,\n        type: 'rectangle',\n        color: '#777',\n        width: 150,\n        height: 50\n    };\n    const newNode: Node<DiagramNodeData> = {\n      id: newNodeId,\n      type: 'custom',\n      position,\n      data: newNodeData,\n      width: newNodeData.width,\n      height: newNodeData.height,\n    };\n    setRfNodes((nds) => nds.concat(newNode));\n  }, [rfNodes, reactFlowInstance, setRfNodes]);\n\n  const clearDiagram = useCallback(() => {\n    setRfNodes([]);\n    setRfEdges([]);\n  }, [setRfNodes, setRfEdges]);\n\n  // ... keep existing code (onDownloadImage, readonly return, editable return structure)\n  const onDownloadImage = useCallback(() => {\n    console.log(\"Download image functionality to be implemented.\");\n    // Implementation using toPng or html-to-image\n  }, [title, canvasSettings.backgroundColor]);\n\n\n  if (readonly) {\n    return (\n      <div className=\"diagram-block readonly p-4 border rounded-md bg-gray-900 border-gray-700\">\n        <h3 className=\"text-lg font-semibold text-white mb-2\">{title}</h3>\n        {description && <p className=\"text-sm text-gray-400 mb-4\">{description}</p>}\n        <div style={{ width: '100%', height: 400, backgroundColor: canvasSettings.backgroundColor }} className=\"rounded overflow-hidden\">\n          <ReactFlow\n            nodes={rfNodes}\n            edges={rfEdges}\n            nodeTypes={nodeTypes}\n            edgeTypes={edgeTypes}\n            fitView\n            nodesDraggable={false}\n            nodesConnectable={false}\n            elementsSelectable={false}\n            zoomOnScroll={false}\n            panOnDrag={false}\n            proOptions={{ hideAttribution: true }}\n          >\n            <Background color=\"#444\" gap={canvasSettings.gridSize} variant={BackgroundVariant.Dots} />\n            <MiniMap nodeStrokeWidth={3} nodeColor={(n: Node<DiagramNodeData>) => n.data?.color || '#fff'} />\n          </ReactFlow>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"diagram-block-editor p-2 space-y-3 bg-gray-950 border border-gray-800 rounded-lg\">\n      <div className=\"flex flex-col sm:flex-row gap-2\">\n        <Input \n          placeholder=\"Título do Diagrama\" \n          value={title} \n          onChange={(e) => setTitle(e.target.value)}\n          className=\"flex-grow bg-gray-800 border-gray-700 text-white placeholder-gray-500\"\n        />\n      </div>\n      <Textarea \n        placeholder=\"Descrição (opcional)\" \n        value={description} \n        onChange={(e) => setDescription(e.target.value)}\n        className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-500 h-20 resize-none\"\n      />\n      <div style={{ width: '100%', height: 500, border: '1px solid #333', borderRadius: '4px', backgroundColor: canvasSettings.backgroundColor }} className=\"relative overflow-hidden\">\n        <ReactFlow\n          nodes={rfNodes}\n          edges={rfEdges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          nodeTypes={nodeTypes}\n          edgeTypes={edgeTypes}\n          fitView\n          className=\"custom-diagram-flow\"\n          proOptions={{ hideAttribution: true }}\n        >\n          <Background\n            color={canvasSettings.gridSize && canvasSettings.gridSize > 0 ? \"#555\" : 'transparent'}\n            gap={canvasSettings.gridSize || 20}\n            variant={canvasSettings.gridSize && canvasSettings.gridSize > 0 ? BackgroundVariant.Dots : undefined}\n          />\n          <Controls className=\"react-flow__controls-custom\" />\n          <MiniMap nodeStrokeWidth={3} nodeColor={(n: Node<DiagramNodeData>) => n.data?.color || '#fff'} className=\"react-flow__minimap-custom\"/>\n          <Panel position=\"top-left\" className=\"flex gap-1 p-1 bg-gray-800/50 rounded\">\n            <Button onClick={addNode} size=\"sm\" variant=\"ghost\" className=\"text-gray-300 hover:text-white hover:bg-gray-700\"><Palette size={16} className=\"mr-1\" /> Adicionar Nó</Button>\n            <Button onClick={clearDiagram} size=\"sm\" variant=\"ghost\" className=\"text-red-400 hover:text-red-300 hover:bg-red-900/30\"><Eraser size={16} className=\"mr-1\" /> Limpar</Button>\n            <Button onClick={onDownloadImage} size=\"sm\" variant=\"ghost\" className=\"text-blue-400 hover:text-blue-300 hover:bg-blue-900/30\"><Download size={16} className=\"mr-1\" /> Baixar</Button>\n          </Panel>\n        </ReactFlow>\n      </div>\n    </div>\n  );\n};\n"
}
